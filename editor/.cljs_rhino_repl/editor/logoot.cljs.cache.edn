;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name editor.logoot, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {create-doc {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 78, :column 7, :end-line 78, :end-column 17, :arglists (quote ([])), :doc "Creates an empty logoot document, with its beggining and finish lines"}, :name editor.logoot/create-doc, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates an empty logoot document, with its beggining and finish lines"}, MAX_INT {:name editor.logoot/MAX_INT, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 34, :column 1, :end-line 34, :end-column 13, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 34, :column 6, :end-line 34, :end-column 13}}, index->pid {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 175, :column 7, :end-line 175, :end-column 17, :arglists (quote ([doc index])), :doc "Returns the pid of a given index"}, :name editor.logoot/index->pid, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 17, :method-params ([doc index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc index])), :doc "Returns the pid of a given index"}, doc->hash-map {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 208, :column 7, :end-line 208, :end-column 20, :arglists (quote ([doc])), :doc "Given a logoot document, transform each line to a hash-map"}, :name editor.logoot/doc->hash-map, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 20, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :doc "Given a logoot document, transform each line to a hash-map"}, insert-after {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 190, :column 7, :end-line 190, :end-column 19, :arglists (quote ([doc site clock index content])), :doc "Inserts the content after a line index"}, :name editor.logoot/insert-after, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 19, :method-params ([doc site clock index content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 5, :fn-var true, :arglists (quote ([doc site clock index content])), :doc "Inserts the content after a line index"}, rand-pos-bet {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([site l1 l2])), :doc "Generates a random position with lines between two numbers"}, :name editor.logoot/rand-pos-bet, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 19, :method-params ([site l1 l2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists (quote ([site l1 l2])), :doc "Generates a random position with lines between two numbers"}, insert {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 182, :column 7, :end-line 182, :end-column 13, :arglists (quote ([doc pid content])), :doc "Inserts the content into pid key of the given document"}, :name editor.logoot/insert, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 13, :method-params ([doc pid content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 3, :fn-var true, :arglists (quote ([doc pid content])), :doc "Inserts the content into pid key of the given document"}, gen-pos {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 122, :column 7, :end-line 122, :end-column 14, :arglists (quote ([site pos1 pos2])), :doc "Generate a position between two positions"}, :name editor.logoot/gen-pos, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 14, :method-params ([site pos1 pos2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([site pos1 pos2])), :doc "Generate a position between two positions"}, delete {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 201, :column 7, :end-line 201, :end-column 13, :arglists (quote ([doc pid])), :doc "Removes pid key from the given document"}, :name editor.logoot/delete, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 13, :method-params ([doc pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc pid])), :doc "Removes pid key from the given document"}, pos->logoot-str {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 215, :column 7, :end-line 215, :end-column 22, :arglists (quote ([pos])), :doc "Given a position, returns a string representation of it"}, :name editor.logoot/pos->logoot-str, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 22, :method-params ([pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pos])), :doc "Given a position, returns a string representation of it"}, pid->index {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 168, :column 7, :end-line 168, :end-column 17, :arglists (quote ([doc pid])), :doc "Returns the index of a given pid"}, :name editor.logoot/pid->index, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 17, :method-params ([doc pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([doc pid])), :doc "Returns the index of a given pid"}, document {:name editor.logoot/document, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 57, :column 1, :end-line 57, :end-column 14, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 57, :column 6, :end-line 57, :end-column 14}}, rand-int-bet {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 94, :column 7, :end-line 94, :end-column 19, :arglists (quote ([x y])), :doc "Returns a random integer between x (exclusive) and y (exclusive). Nil\n  if there isn't integer between two numbers"}, :name editor.logoot/rand-int-bet, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 19, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Returns a random integer between x (exclusive) and y (exclusive). Nil\n  if there isn't integer between two numbers"}, zip {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 86, :column 7, :end-line 86, :end-column 10, :arglists (quote ([& colls])), :doc "Creates a list of grouped elements by index", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(colls)], :arglists ([& colls]), :arglists-meta (nil)}}, :name editor.logoot/zip, :variadic true, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(colls)], :arglists ([& colls]), :arglists-meta (nil)}, :method-params [(colls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 0, :fn-var true, :arglists ([& colls]), :doc "Creates a list of grouped elements by index"}, doc->logoot-str {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 224, :column 7, :end-line 224, :end-column 22, :arglists (quote ([doc])), :doc "Given a logoot document, returns a string representation of it"}, :name editor.logoot/doc->logoot-str, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 22, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :doc "Given a logoot document, returns a string representation of it"}, compare-pid {:protocol-inline nil, :meta {:file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :line 36, :column 7, :end-line 36, :end-column 18, :arglists (quote ([[pos1] [pos2]])), :doc "Compare two pids. If all intersecting pos identifier are equal, the bigger\n  pos vector will win."}, :name editor.logoot/compare-pid, :variadic false, :file "/Users/hugobessa/workspace/tcc/editor/src/editor/logoot.cljs", :end-column 18, :method-params ([p__18338 p__18339]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[pos1] [pos2]])), :doc "Compare two pids. If all intersecting pos identifier are equal, the bigger\n  pos vector will win."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{MAX_INT :else :content :ns :name :file :end-column :pos :source editor.logoot :column :lb :line editor.logoot/MAX_INT :end-line :clock :arglists :le :doc :test}, :order [editor.logoot/MAX_INT :ns :name :file :end-column :source :column :line :end-line :arglists :doc :test editor.logoot MAX_INT :lb :le :else :pos :clock :content]}, :doc nil}